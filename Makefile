#############################################################################
# Makefile for building: sith
# Generated by qmake (1.07a) (Qt 3.3.8b) on: Sun Mar 23 15:34:59 2014
# Project:  sith.pro
# Template: app
# Command: $(QMAKE) -o Makefile sith.pro
#############################################################################

####### Compiler, tools and options

CC       = gcc
CXX      = g++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -Wall -W -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fno-strict-aliasing  -DQT_NO_DEBUG -DQT_SHARED -DQT_TABLET_SUPPORT -DQT_THREAD_SUPPORT
CXXFLAGS = -pipe -Wall -W -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fno-strict-aliasing  -DQT_NO_DEBUG -DQT_SHARED -DQT_TABLET_SUPPORT -DQT_THREAD_SUPPORT
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I/usr/lib64/qt-3.3/mkspecs/default -I. -I$(QTDIR)/include
LINK     = g++
LFLAGS   = 
LIBS     = $(SUBLIBS) -L$(QTDIR)/lib -lqt-mt -lXext -lX11 -lm
AR       = ar cqs
RANLIB   = 
MOC      = $(QTDIR)/bin/moc
UIC      = $(QTDIR)/bin/uic
QMAKE    = qmake
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY)
COPY_DIR = $(COPY) -r
INSTALL_FILE= $(COPY_FILE)
INSTALL_DIR = $(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = ./

####### Files

HEADERS = mainwindow.h \
		creategraphscene.h \
		graphcoloring.h \
		decryption.h \
		fakemessages.h \
		gcolor.h \
		basicdictionary.h
SOURCES = main.cpp \
		mainwindow.cpp \
		creategraphscene.cpp \
		graphcoloring.cpp \
		decryption.cpp \
		fakemessages.cpp \
		gcolor.cpp \
		basicdictionary.cpp
OBJECTS = main.o \
		mainwindow.o \
		creategraphscene.o \
		graphcoloring.o \
		decryption.o \
		fakemessages.o \
		gcolor.o \
		basicdictionary.o \
		mainwindow.o
FORMS = mainwindow.ui
UICDECLS = mainwindow.h
UICIMPLS = mainwindow.cpp
SRCMOC   = moc_mainwindow.cpp \
		moc_mainwindow.cpp
OBJMOC = moc_mainwindow.o \
		moc_mainwindow.o
DIST	   = sith.pro
QMAKE_TARGET = sith
DESTDIR  = 
TARGET   = sith

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(UICDECLS) $(OBJECTS) $(OBJMOC)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(OBJCOMP) $(LIBS)

mocables: $(SRCMOC)
uicables: $(UICDECLS) $(UICIMPLS)

$(MOC): 
	( cd $(QTDIR)/src/moc && $(MAKE) )

Makefile: sith.pro  /usr/lib64/qt-3.3/mkspecs/default/qmake.conf /usr/lib64/qt-3.3/lib/libqt-mt.prl
	$(QMAKE) -o Makefile sith.pro
qmake: 
	@$(QMAKE) -o Makefile sith.pro

dist: 
	@mkdir -p .tmp/sith && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) .tmp/sith/ && ( cd `dirname .tmp/sith` && $(TAR) sith.tar sith && $(GZIP) sith.tar ) && $(MOVE) `dirname .tmp/sith`/sith.tar.gz . && $(DEL_FILE) -r .tmp/sith

mocclean:
	-$(DEL_FILE) $(OBJMOC)
	-$(DEL_FILE) $(SRCMOC)

uiclean:
	-$(DEL_FILE) $(UICIMPLS) $(UICDECLS)

yaccclean:
lexclean:
clean: mocclean uiclean
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) $(TARGET)


FORCE:

####### Compile

main.o: main.cpp mainwindow.h

mainwindow.o: mainwindow.cpp mainwindow.h \
		creategraphscene.h \
		graphcoloring.h \
		decryption.h \
		gcolor.h \
		fakemessages.h \
		basicdictionary.h \
		mainwindow.h

creategraphscene.o: creategraphscene.cpp creategraphscene.h

graphcoloring.o: graphcoloring.cpp graphcoloring.h

decryption.o: decryption.cpp decryption.h

fakemessages.o: fakemessages.cpp fakemessages.h

gcolor.o: gcolor.cpp gcolor.h

basicdictionary.o: basicdictionary.cpp basicdictionary.h

mainwindow.h: mainwindow.ui 
	$(UIC) mainwindow.ui -o mainwindow.h

mainwindow.cpp: mainwindow.h mainwindow.ui 
	$(UIC) mainwindow.ui -i mainwindow.h -o mainwindow.cpp

mainwindow.o: mainwindow.cpp mainwindow.h \
		creategraphscene.h \
		graphcoloring.h \
		decryption.h \
		gcolor.h \
		fakemessages.h \
		basicdictionary.h \
		mainwindow.h

moc_mainwindow.o: moc_mainwindow.cpp  mainwindow.h 

moc_mainwindow.o: moc_mainwindow.cpp  mainwindow.h 

moc_mainwindow.cpp: $(MOC) mainwindow.h
	$(MOC) mainwindow.h -o moc_mainwindow.cpp

moc_mainwindow.cpp: $(MOC) mainwindow.h
	$(MOC) mainwindow.h -o moc_mainwindow.cpp

####### Install

install:  

uninstall:  

